/* vim: set filetype=finn foldmethod=marker foldlevel=0 nowrap: */

Installation
============

install xcode command line tools [1]
------------------------------------

```bash
sudo rm -rf /Library/Developer/CommandLineTools
xcode-select --install
xcodebuild -license
```

install homebrew
----------------

```bash
/bin/bash -c "$(curl \
                  --fail \
                  --silent \
                  --show-error \
                  --location \
                  https://github.com/Homebrew/install/raw/master/install.sh)"
brew analytics off
```

install homebrew core packages
------------------------------

```bash
# apple
packages+=('mas')

# build
packages+=('make')

# compress
packages+=('gzip'
           'p7zip'
           'xz')

# connect
packages+=('dnscrypt-proxy'
           'mosh'
           'openssh'
           'openvpn'
           'proxychains-ng'
           'socat'
           'sshuttle'
           'tor'
           'torsocks'
           'wireguard-tools')

# count
packages+=('tokei')

# diff
packages+=('colordiff'
           'diffr'
           'diffutils'
           'icdiff')

# dvcs
packages+=('git'
           'mercurial'
           'mr')

# editor
packages+=('macvim'
           'neovim')

# edu
packages+=('so'
           'tealdeer')

# encrypt
packages+=('ccrypt'
           'gnupg'
           'gnutls'
           'oath-toolkit'
           'openssl'
           'signify-osx'
           'ssss')

# filesystem
packages+=('ncdu'
           'tree')

# filter
packages+=('jq'
           'remarshal'
           'qrencode')

# gnu
packages+=('binutils'
           'coreutils'
           'gawk'
           'gnu-getopt'
           'gnu-sed'
           'gnu-tar'
           'gnu-time'
           'gnu-units'
           'gnu-which')

# grep
packages+=('ack'
           'findutils'
           'grep'
           'ripgrep'
           'the_silver_searcher')

# highlight
packages+=('bat')

# lint
packages+=('shellcheck')

# media
packages+=('exiftool'
           'ffmpeg')

# server
packages+=('darkhttpd')

# sync
packages+=('aria2'
           'curl'
           'rclone'
           'rsync'
           'wget'
           'youtube-dl')

# terminal
packages+=('bash'
           'bash-completion@2'
           'moreutils'
           'rlwrap'
           'tmux')

brew install "${packages[@]}"
```

configure shell
---------------

```bash
if ! fgrep -q '/usr/local/bin/bash' /etc/shells; then
  echo '/usr/local/bin/bash' | sudo tee -a /etc/shells
  chsh -s /usr/local/bin/bash
fi
```

configure macos: general settings
---------------------------------

```bash
./macos.sh
```

configure macos: security settings [2][3][4]
--------------------------------------------

```bash
git clone https://github.com/kristovatlas/osx-config-check
cd osx-config-check
python app.py
```

install homebrew cask packages
------------------------------

```bash
# chat
casks+=('adium'
        'coyim'
        'ricochet')

# design
casks+=('abstract'
        'sketch'
        'zeplin')

# display
casks+=('keepingyouawake')

# email
casks+=('canary')

# ftp clients
casks+=('cyberduck')

# keyboard
casks+=('karabiner-elements')

# media player
casks+=('iina'
        'vlc')

# office
casks+=('libreoffice')

# os image flasher
casks+=('balenaetcher'
        'unetbootin')

# password management
casks+=('keepassx')

# screencasting
casks+=('ishowu-instant'
        'kap'
        'keycastr')

# security
casks+=('blockblock'
        'little-snitch'
        'micro-snitch'
        'veracrypt')

# storage
casks+=('dropbox')

# system
casks+=('osxfuse')

# terminal emulators
casks+=('iterm2')

# text editors
casks+=('sublime-text'
        'textmate')

# virtualization
casks+=('virtualbox'
        'virtualbox-extension-pack'
        'vmware-fusion')

# web browsers
casks+=('firefox'
        'google-chrome'
        'tor-browser')

brew tap caskroom/cask
brew cask install "${casks[@]}"
```

configure security software
---------------------------

### dnscrypt-proxy

```bash
vim /usr/local/etc/dnscrypt-proxy.toml
sudo brew services start dnscrypt-proxy
```

- System Preferences -> Network -> Advanced
  - DNS
    - set DNS Servers to 127.0.0.1

### little snitch

```bash
open /usr/local/Caskroom/little-snitch/4.5.2/LittleSnitch-4.5.2.dmg
```

configure desktop
-----------------

### airplay

- System Preferences -> Sharing
  - AirPlay Receiver
    - uncheck

### audio

- System Preferences -> Sound
  - Show volume in menu bar

### iterm2

- setup iterm2 seoul256 colorscheme [5]
- setup iterm2 alt keybindings [6]
  - | Q: How do I make the option/alt key act like Meta or send escape
    |    codes?
    |
    | A: Go to Preferences > Profiles tab. Select your profile on the
    |    left, and then open the Keyboard tab. At the bottom is a set
    |    of buttons that lets you select the behavior of the Option
    |    key. For most users, Esc+ will be the best choice.

### keyboard

- remap capslock key to backspace with karabiner-elements
- System Preferences -> Keyboard
  - Keyboard
    - Repeat: fastest
    - Delay: second shortest
  - Shortcuts
    - Launchpad & Dock
      - uncheck all
    - Mission Control
      - uncheck all except "Show Desktop"
      - change "Show Desktop" to Super+D
    - Keyboard
      - uncheck all except "Move focus to next window"
    - Accessibility
      - uncheck all
    - App Shortcuts
      - uncheck all

configure developer environment
-------------------------------

### monaco nerd font

patch font [7]
- |     # fetch dependencies
  |     brew install fondu
  |     brew install fontforge
  |
  |     # curl snapshot because repo is over 1GB when git cloned
  |     curl -L -o '#1-#2.#3' https://github.com/ryanoasis/{nerd-fonts}/archive/{master}.{tar.gz}
  |     tar xvzf nerd-fonts-master.tar.gz
  |     cd nerd-fonts-master
  |
  |     # modify font-patcher to use brew installed python3
  |     sed -i '1s/\(.*\)/\13/' font-patcher
  |
  |     # modify font-patcher to find brew installed python3 site-lib
  |     sed -i '/^import sys.*/a import site; site.addsitedir("/usr/local/lib/python3.8/site-packages")' font-patcher
  |
  |     # patch font
  |     cp /System/Library/Fonts/Monaco.dfont .
  |     fondu Monaco.dfont
  |     ./font-patcher \
  |       --careful \
  |       --use-single-width-glyphs \
  |       --powerline \
  |       --powerlineextra \
  |       Monaco.ttf

install font
- open *Font Book*
  - File -> Add Fonts
    - add `Monaco Nerd Font Mono.ttf`

see also
- programmingfonts.org [8]
- MonoLisa [9]
- GianCastle/FiraMonaco [10]

### macfiles

```bash
./bootstrap.sh
```

### fzf-extras

```bash
git clone https://github.com/atweiden/fzf-extras "$HOME/.fzf-extras"
```

### universal-ctags

```bash
brew tap universal-ctags/universal-ctags
brew install --HEAD universal-ctags
```

install homebrew custom packages
--------------------------------

```bash
git clone https://github.com/atweiden/homebrew-formulae
pushd homebrew-formulae
brew install enchive/enchive.rb
```

install programming languages
-----------------------------

### c

```bash
brew install gcc
brew install llvm
```

### clojure

```bash
brew tap adoptopenjdk/openjdk
brew cask install adoptopenjdk/openjdk
brew cask install graalvm/tap/graalvm-ce-java11
brew install clojure
brew install leiningen
brew install boot-clj
brew install lumo
# pending resolution of https://clojure.atlassian.net/browse/TDEPS-99
cat > $HOME/.config/maven/settings.xml <<'EOF'
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      https://maven.apache.org/xsd/settings-1.0.0.xsd">
  <localRepository>${env.XDG_CACHE_HOME}/maven/repository</localRepository>
</settings>
EOF
alias mvn='mvn --global-settings $HOME/.config/maven/settings.xml'
unset _JAVA_OPTIONS
_JAVA_OPTIONS+=" -Djava.util.prefs.userRoot=$HOME/.config/java"
_JAVA_OPTIONS+=" -Dorg.apache.maven.user-settings=$HOME/.config/maven/settings.xml"
export _JAVA_OPTIONS
```

### elixir

```bash
brew install elixir
brew install erlang
```

### fennel

```bash
brew install fennel
```

```bash
brew install luajit-openresty
git clone https://git.sr.ht/~technomancy/fennel
pushd fennel
make fennel
cp fennel "$HOME/.bin"
popd
```

### git

```bash
# git undo
cargo install git-branchless
```

### go

```bash
brew install go
brew install delve
brew install golangci-lint
brew install gopls
brew install goreleaser
brew install gotags
```

### javascript

```bash
brew install node
brew install yarn
```

### lisp

```bash
brew install sbcl
curl -O https://beta.quicklisp.org/quicklisp.lisp{,.asc}
sbcl --load quicklisp.lisp
* (quicklisp-quickstart:install)
* (ql:add-to-init-file)
```

### python

```bash
brew install python
brew install python@2
pip install --upgrade pip setuptools
pip3 install --upgrade pip setuptools

git clone https://github.com/pyenv/pyenv "$HOME/.pyenv"
cd "$HOME/.pyenv"
src/configure
make -C src
eval "$(pyenv init -)"
```

### raku

```bash
brew install perl
brew install rakudo
pushd "$HOME/.src"
git clone https://github.com/ugexe/zef
pushd zef
raku -I. bin/zef install .
popd
popd
```

### reason

```bash
npm install --global esy
pushd "$HOME/.src"
git clone https://github.com/esy-ocaml/hello-reason
pushd hello-reason
esy
popd
popd
```

### rust

rustup nightly [11]

```bash
brew install rustup
rustup-init --no-modify-path --default-toolchain none -y
rustup toolchain install nightly \
  --allow-downgrade \
  --profile minimal \
  --component clippy \
  --component rustfmt
rustup completions bash > \
  $(brew --prefix)/etc/bash_completion.d/rustup.bash-completion
```

rustup stable

```bash
rustup toolchain install stable \
  --component clippy \
  --component rustfmt
rustup default stable
```

rust repl [12]

```bash
rustup component add rust-src
cargo install evcxr_repl

# cache compiled crates
cargo install sccache
```

rust runner [13]

```bash
cargo install runner
```

enable `cargo add` subcommand

```bash
# add, remove and upgrade dependencies
cargo install cargo-edit
```

enable `cargo udeps` subcommand

```bash
# find unused dependencies
cargo install cargo-udeps
```

enable `cargo sweep` subcommand

```bash
# clean up old build artefacts
cargo install cargo-sweep
```

enable `cargo outdated` subcommand

```bash
# find outdated dependencies
cargo install cargo-outdated
```

enable `cargo crev` subcommand

```bash
# audit dependencies
cargo install cargo-crev
```

enable `cargo deny` subcommand

```bash
# audit dependencies and lint Cargo.toml
cargo install cargo-deny
```

enable `cargo audit` subcommand

```bash
# find dependencies with reported security vulnerabilities
cargo install cargo-audit
```

enable `cargo diet` subcommand

```bash
# suggest cargo manifest include directive to minimize size of crate
cargo install cargo-diet
```

enable `cargo bloat` subcommand

```bash
# identify opportunities for binary size reduction
cargo install cargo-bloat
```

enable `cargo expand` subcommand

```bash
# show results of macro expansion
cargo install cargo-expand
```

enable `cargo update` subcommand

```bash
# check and apply updates to installed executables
cargo install cargo-update
```

enable `cargo listdoc` subcommand

```bash
# locate relevant rustdoc
cargo install rustdoc-index
```


******************************************************************************

[1]: https://developer.apple.com/download/more/
[2]: https://objective-see.com/products.html
[3]: https://github.com/drduh/macOS-Security-and-Privacy-Guide
[4]: https://docs.hardentheworld.org/OS/MacOS_10.12_Sierra/
[5]: https://github.com/atweiden/iterm2-seoul256-night
[6]: https://iterm2.com/faq.html
[7]: https://github.com/ryanoasis/nerd-fonts/issues/254
[8]: https://www.programmingfonts.org/
[9]: https://monolisa.dev/
[10]: https://github.com/GianCastle/FiraMonaco
[11]: https://rust-lang.github.io/rustup/installation/
[12]: https://github.com/google/evcxr
[13]: https://stevedonovan.github.io/rustifications/2018/09/23/runner.html
