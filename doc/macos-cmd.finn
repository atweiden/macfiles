/* vim: set filetype=finn foldmethod=marker foldlevel=0 nowrap: */

useful commands
===============

## copy photos from iphone import

```sh
cp \
  ~/Pictures/Photos\ Library.photoslibrary/Masters/2017/09/30/20170930-014311/IMG_0214.JPG \
  ~/img.jpg
```

## convert jpgs into pdf

```sh
brew install imagemagick
convert $(ls -v *.jpg) document.pdf
```

## combine pdfs

```sh
# credit: https://apple.stackexchange.com/a/230447
"/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py" \
  -o /path/to/combined/doc.pdf \
  /path/to/part/1.pdf \
  /path/to/part/2.pdf \
  /path/to/part/3.pdf
```

## disk usage

```sh
ncdu /
```

## homebrew

view formulae

```sh
vim /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/just.rb
vim /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask/Casks/adium.rb
```

clear cache

```sh
brew cleanup
brew --cache
find /usr/local/Cellar/llvm/ -mindepth 1 -maxdepth 1 -type d ! -name "5\.0\.1" \
  -exec echo rm -rf '{}' \;
find /usr/local/Cellar/llvm/ -mindepth 1 -maxdepth 1 -type d ! -name "5\.0\.1" \
  -exec rm -rf '{}' \;
```

reinstall all

```sh
brew list | xargs brew reinstall
```

find formulae dependencies

```sh
brew deps \
  --include-build \
  --include-optional \
  --include-requirements \
  icu4c
```

find formulae dependants

```sh
brew uses \
  --recursive \
  --installed \
  icu4c
```

list files installed by formula

```sh
brew ls --verbose vim
```

import homebrew in irb environment

```sh
brew irb
```

## python

```sh
pip2 install --upgrade pip setuptools wheel
pip3 install --upgrade pip setuptools wheel
pip2 install ipython ptpython
pip3 install ipython ptpython
```

## neovim

```sh
pip2 install -U neovim
pip3 install -U neovim
```

## open second instance of iTerm2

```sh
open -n -a iTerm
```

## secure delete

```sh
srm -mz file
```

## copy saved wifi password

- open *Keychain Access* application
- ctrl-click target wifi network
  - Copy Password to Clipboard

## irrsi

configure
- `vim ~/.config/irssi/config`
  - `:%s/yourname/your-real-irc-name/g`

authenticate
- `/msg nickserv identify password`

connect
- `/connect freenode`

join
- `/join #archlinux`

scroll
- <kbd>fn</kbd><kbd>shift</kbd><kbd>arrow</kbd>
- `/scrollback goto <time|lineno>`

windows
- <kbd>Alt-Right</kbd>, <kbd>Ctrl-n</kbd> or `/window next`
- <kbd>Alt-Left</kbd>, <kbd>Ctrl-p</kbd> or `/window previous`

## record screen with system sound

```sh
brew cask install soundflower
```

- change system audio output from default speakers to soundflower
  sound card
  - System Preferences -> Sound -> Output
    - select Soundflower (2ch)
- start recording screen
  - either
    - launch QuickTime Player
      - right click dock icon
        - New Screen Recording
    - <kbd>Shift</kbd><kbd>Cmd</kbd><kbd>5</kbd>
      - Record Entire Screen
      - Record Selected Portion
  - options
    - Microphone
      - select Soundflower (2ch)
- stop recording screen
  - <kbd>Ctrl</kbd><kbd>Cmd</kbd><kbd>Esc</kbd>

## compress/convert mov screen recording

```sh
ffmpeg -i input.mov -qscale 31 output.mp4
```

- qscale sets the compression level
  - the lower the qscale value, the higher the quality
    - available qscale values range from 1 (hi-def) to 31 (low-def)
- takes 5 minutes to compress a 3 minute video at qscale 31
  - file size shrinks from 327M to 32M
  - video and sound quality remains decent

## compress pdf file size

create custom pdf quartz filter for apple preview

```sh
vim ~/Library/Filters/Reduce\ File\ Size\ with\ Good\ Quality.qfilter
```

/* qfilter {{{ */

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Domains</key>
    <dict>
        <key>Applications</key>
        <true/>
        <key>Printing</key>
        <true/>
    </dict>
    <key>FilterData</key>
    <dict>
        <key>ColorSettings</key>
        <dict>
            <key>DocumentColorSettings</key>
            <dict>
                <key>CustomLHSCorrection</key>
                <array>
                    <integer>8</integer>
                    <integer>8</integer>
                    <integer>8</integer>
                </array>
            </dict>
            <key>ImageSettings</key>
            <dict>
                <key>Compression Quality</key>
    <!-- ====== Set your custom quality <0,1> ======= -->
                <real>0.0</real>
                <key>ImageCompression</key>
                <string>ImageJPEGCompress</string>
                <key>ImageScaleSettings</key>
                <dict>
                    <key>ImageScaleFactor</key>
    <!-- ====== Set your scale factor <0,1> ======= -->
                    <real>0.75</real>
                    <key>ImageScaleInterpolate</key>
                    <true/>
    <!-- ====== Set what sizes your images can reach ======= -->
                    <key>ImageSizeMax</key>
                    <integer>1684</integer>
                    <key>ImageSizeMin</key>
                    <integer>1200</integer>
                </dict>
            </dict>
        </dict>
    </dict>
    <key>FilterType</key>
    <integer>1</integer>
    <key>Name</key>
    <!-- ====== Set unique display name for your filter ======= -->
    <string>Reduce Size Good Quality</string>
</dict>
</plist>
```

/* end qfilter }}} */

- adjusting compression quality down to 0.0 reduces file size to 50%
  of original with no discernable degradation in quality

create custom pdf quartz filter for apple preview with apple colorsync

- open apple colorsync util
  - filters
    - reduce file size
      - click down-arrow drop menu on rhs
        - duplicate filter
          - rename duplicated filter to Better Reduce File Size
    - better reduce file size
      - image sampling
        - quality: high
        - set scale: (uncheck)
        - set resolution: 300 pixels / inch
        - constrain size: (uncheck)
- further adjust Better Reduce File Size quartz filter
  - compression quality: 0.0

```sh
vim ~/Library/Filters/Better\ Reduce\ File\ Size.qfilter
```

/* qfilter {{{ */

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Domains</key>
  <dict>
    <key>Applications</key>
    <true/>
    <key>Printing</key>
    <true/>
  </dict>
  <key>FilterData</key>
  <dict>
    <key>ColorSettings</key>
    <dict>
      <key>ImageSettings</key>
      <dict>
        <key>Compression Quality</key>
        <real>0.0</real>
        <key>ImageCompression</key>
        <string>ImageJPEGCompress</string>
        <key>ImageScaleSettings</key>
        <dict>
          <key>ImageResolution</key>
          <integer>300</integer>
          <key>ImageScaleFactor</key>
          <real>0.0</real>
          <key>ImageScaleInterpolate</key>
          <integer>3</integer>
          <key>ImageSizeMax</key>
          <integer>0</integer>
          <key>ImageSizeMin</key>
          <integer>0</integer>
        </dict>
      </dict>
    </dict>
  </dict>
  <key>FilterType</key>
  <integer>1</integer>
  <key>Name</key>
  <string>Better Reduce File Size</string>
</dict>
</plist>
```

/* end qfilter }}} */

compress pdf with apple preview

- open pdf in apple preview
  - file
    - export
      - quartz filter
        - select *Better Reduce File Size*, or
        - select *Reduce File Size with Good Quality*
      - save

optionally squeeze pdf

```sh
brew install opam
opam init
eval $(opam env)
# because cpdf currently requires 4.03 < $OCAML_VERSION < 4.06
opam switch create 4.05.0
eval $(opam env)
opam install cpdf
cpdf -squeeze in.pdf -o out.pdf
```

## docker

install

- `brew cask install docker`
  - necessary to use cask on macos to avoid weirdness
- launch the docker app
  - it will ask for privileged access
    - confirm
      - wait a while for docker to load
        - a whale icon should appear in the top bar
          - click it and wait for "docker is running" to appear

use

```sh
# obtain ocaml/rwo from dockerhub
docker pull ocaml/rwo

# obtain name: ocaml/rwo, tag: latest
docker image list

# run container interactively
docker run -i -t ocaml/rwo:latest /bin/bash
make
exit

# run container as daemon
docker run -d -t ocaml/rwo:latest

# container id: cd893186e3d0
docker container ls

# copy files from container
docker cp cd893186e3d0:/home/opam/src/_build/default/static ~/.src/rwo

# stop container
docker stop cd893186e3d0
```
