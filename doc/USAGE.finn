/* vim: set filetype=finn foldmethod=marker foldlevel=0 nowrap: */

Usage
=====

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Media
-----

### copy photos from iphone import

```sh
cp \
  "$HOME/Pictures/Photos\ Library.photoslibrary/Masters/2017/09/30/20170930-014311/IMG_0214.JPG" \
  "$HOME/img.jpg"
```

### convert svg to png

```sh
brew install librsvg
rsvg-convert -h 600 logo.svg > logo-600.png
```

### convert jpgs into pdf

```sh
brew install imagemagick
convert $(ls -v *.jpg) document.pdf
```

### combine pdfs

```sh
# credit: https://apple.stackexchange.com/a/230447
"/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py" \
  -o /path/to/combined/doc.pdf \
  /path/to/part/1.pdf \
  /path/to/part/2.pdf \
  /path/to/part/3.pdf
```

### compress pdf file size

create custom pdf quartz filter for apple preview

```sh
cp \
  resources/Reduce\ File\ Size\ with\ Good\ Quality.qfilter \
  "$HOME/Library/Filters"
```

- adjusting compression quality down to 0.0 reduces file size to 50%
  of original with no discernable degradation in quality

create custom pdf quartz filter for apple preview with apple colorsync

- open apple colorsync util
  - filters
    - reduce file size
      - click down-arrow drop menu on rhs
        - duplicate filter
          - rename duplicated filter to Better Reduce File Size
    - better reduce file size
      - image sampling
        - quality: high
        - set scale: (uncheck)
        - set resolution: 300 pixels / inch
        - constrain size: (uncheck)
- further adjust Better Reduce File Size quartz filter
  - compression quality: 0.0

```sh
cp \
  resources/Better\ Reduce\ File\ Size.qfilter \
  "$HOME/Library/Filters"
```

compress pdf with apple preview

- open pdf in apple preview
  - file
    - export
      - quartz filter
        - select *Better Reduce File Size*, or
        - select *Reduce File Size with Good Quality*
      - save

optionally squeeze pdf

```sh
brew install opam
opam init
eval $(opam env)
# because cpdf currently requires 4.03 < $OCAML_VERSION < 4.06
opam switch create 4.05.0
eval $(opam env)
opam install cpdf
cpdf -squeeze in.pdf -o out.pdf
```

### record screen with system sound

```sh
brew cask install soundflower
```

- change system audio output from default speakers to soundflower
  sound card
  - System Preferences -> Sound -> Output
    - select Soundflower (2ch)
- start recording screen
  - either
    - launch QuickTime Player
      - right click dock icon
        - New Screen Recording
    - <kbd>Shift</kbd><kbd>Cmd</kbd><kbd>5</kbd>
      - Record Entire Screen
      - Record Selected Portion
  - options
    - Microphone
      - select Soundflower (2ch)
- stop recording screen
  - <kbd>Ctrl</kbd><kbd>Cmd</kbd><kbd>Esc</kbd>

### compress/convert mov screen recording

```sh
ffmpeg -i input.mov -qscale 31 output.mp4
```

- qscale sets the compression level
  - the lower the qscale value, the higher the quality
    - available qscale values range from 1 (hi-def) to 31 (low-def)
- takes 5 minutes to compress a 3 minute video at qscale 31
  - file size shrinks from 327M to 32M
  - video and sound quality remains decent

### convert mov screen recording to mp4

with ffmpeg

```sh
ffmpeg -i file.mov -pix_fmt yuv420p -q:v 0 -strict -2 file.mp4
```

with handbrake

```sh
# cli (https://handbrake.fr/docs/en/latest/cli/cli-options.html)
brew install handbrake
HandBrakeCLI -i file.mov -o file.mp4

# gui
brew cask install handbrake
```

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

System
------

### disable/enable system integrity protection

disable

1. reboot and go to cmd+r recovery mode
2. use top menu to select terminal from utilities
3. disable system integrity protection by typing `csrutil disable`
4. reboot normally

enable

1. reboot and go to cmd+r recovery mode
2. use top menu to select terminal from utilities
3. enable system integrity protection by typing `csrutil enable`
4. reboot normally

### check disk usage

```sh
ncdu /
```

### open second instance of iTerm2

```sh
open -n -a iTerm
```

### copy saved wifi password

- open *Keychain Access* application
- ctrl-click target wifi network
  - Copy Password to Clipboard

### set mac address

```sh
sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -z
sudo ifconfig en0 ether YY:YY:YY:YY:YY:YY
networksetup -detectnewhardware
```

### disable dictionary lookup

- System Preferences -> Trackpad -> Point & Click
  - untick *Look up & data detectors*

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Software
--------

### homebrew

view formulae

```sh
vim /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/just.rb
vim /usr/local/Homebrew/Library/Taps/caskroom/homebrew-cask/Casks/adium.rb
```

clear cache

```sh
brew cleanup
brew --cache
find /usr/local/Cellar/llvm/ -mindepth 1 -maxdepth 1 -type d ! -name "5\.0\.1" \
  -exec echo rm -rf '{}' \;
find /usr/local/Cellar/llvm/ -mindepth 1 -maxdepth 1 -type d ! -name "5\.0\.1" \
  -exec rm -rf '{}' \;
```

reinstall all

```sh
brew list | xargs brew reinstall
```

find formulae dependencies

```sh
brew deps \
  --include-build \
  --include-optional \
  --include-requirements \
  icu4c
```

find formulae dependants

```sh
brew uses \
  --recursive \
  --installed \
  icu4c
```

list files installed by formula

```sh
brew ls --verbose vim
```

import homebrew in irb environment

```sh
brew irb
```

### iTerm2

disable semantic history

- Preferences -> Profiles -> Advanced -> Semantic History
  - select *Run command*
    - leave blank
      - note
        - re-enable pointer integration if needed
          - in Pointer -> General
          - due to option being greyed out
- Preferences -> Advanced -> Underline Semantic History-selectable items
  under the cursor while holding âŒ˜?
  - set to *no*
- Preferences -> Advanced
  - search for `semantic`

### python

```sh
pip2 install --upgrade pip setuptools wheel
pip3 install --upgrade pip setuptools wheel
pip2 install ipython ptpython
pip3 install ipython ptpython
```

### vim

insert unicode by codepoint

```markdown
<kbd>Ctrl-V</kbd>`Unnnnnnnn`<kbd>Enter</kbd>
```

open terminal in current window

```vim
terminal ++curwin
```

### neovim

```sh
pip2 install -U neovim
pip3 install -U neovim
```

### irrsi

configure
- `vim $HOME/.config/irssi/config`
  - `:%s/yourname/your-real-irc-name/g`

authenticate
- `/msg nickserv identify password`

connect
- `/connect freenode`

join
- `/join #archlinux`

scroll
- <kbd>fn</kbd><kbd>shift</kbd><kbd>arrow</kbd>
- `/scrollback goto <time|lineno>`

windows
- <kbd>Alt-Right</kbd>, <kbd>Ctrl-n</kbd> or `/window next`
- <kbd>Alt-Left</kbd>, <kbd>Ctrl-p</kbd> or `/window previous`

### docker

install

- `brew cask install docker`
  - necessary to use cask on macos to avoid weirdness
- launch the docker app
  - it will ask for privileged access
    - confirm
      - wait a while for docker to load
        - a whale icon should appear in the top bar
          - click it and wait for "docker is running" to appear

use

```sh
# obtain ocaml/rwo from dockerhub
docker pull ocaml/rwo

# obtain name: ocaml/rwo, tag: latest
docker image list

# run container interactively
docker run -i -t ocaml/rwo:latest /bin/bash
make
exit

# run container as daemon
docker run -d -t ocaml/rwo:latest

# container id: cd893186e3d0
docker container ls

# copy files from container
docker cp cd893186e3d0:/home/opam/src/_build/default/static "$HOME/.src/rwo"

# stop container
docker stop cd893186e3d0
```

### signify

verify void linux iso

```sh
signify \
  -C \
  -p /path/to/voidpkgs/srcpkgs/void-release-keys/files/void-release-20191109.pub \
  -x /path/to/sha256.sig \
  /path/to/void-live-x86_64-musl-20191109.iso
```

### tor browser

georestrict tor browser exit node

```sh
cat >> "$HOME/Library/Application\ Support/TorBrowser-Data/Tor/torrc" <<'EOF'
ExitNodes {us}
StrictNodes 1
EOF
```

### units

convert fahrenheit to celsius

```
You have: tempF(70)
You want: tempC
```
